#Variables Start

$ErrorActionPreference = 'SilentlyContinue'
$ProgressPreference = 'SilentlyContinue'

$ScriptName       = 'RTDiagnostic'
$ScriptVers       = '0.1'

$DirBse = $Env:SystemDrive+'\RTSupport'    # Base working Directory

$LogName = ((Get-Date -UFormat "%Y.%m.%d_%R") -replace '[:]')+'_'+$env:COMPUTERNAME+'_'+$ScriptNme+'_v'+$ScriptVer
    $LogTmp = $DirBse+'\'+$LogName+'.tmp'
    $LogTxt = $DirBse+'\'+$LogName+'.log'
#Put your toolset in here in the order you want them to be displayed. Top entry will be selection 1.

$PreMenu   =   @(
    [PSCustomObject]@{DisplayName = 'Test Internet Speed'; FunctionName = 'RTDiag-Test-Bandwidth'}
    [PSCustomObject]@{DisplayName = 'Check System Uptime'; FunctionName = 'RTDiag-Check-System-Uptime'}
    [PSCustomObject]@{DisplayName = 'Check Windows Time'; FunctionName = 'RTDiag-Check-WindowsTime'}
    [PSCustomObject]@{DisplayName = 'Set Power Management'; FunctionName = 'RTDiag-Set-PowerManagement'}
    [PSCustomObject]@{DisplayName = 'Update Chocolatey Packages'; FunctionName = 'RTDiag-ChocoUpdate'}
    [PSCustomObject]@{DisplayName = 'Apply Missing Windows Updates'; FunctionName = 'RTDiag-WinUpdate'}
    [PSCustomObject]@{DisplayName = 'Fix Active Backup Errors'; FunctionName = 'RTDiag-Check-ActiveBackup'}
    [PSCustomObject]@{DisplayName = 'Disk Space Cleanup'; FunctionName = 'RTDiag-Disk-Cleanup'}
    [PSCustomObject]@{DisplayName = 'Check Disk for Issues'; FunctionName = 'RTDiag-Check-Disks'}
)

$n = 1
$Menu   =   @(
$PreMenu | foreach {
    [PSCustomObject]@{Prompt = $n; DisplayName = $_.DisplayName; FunctionName = $_.FunctionName; Selected = 0}
    $n++
}
)

# Variables End

# Functions Start
    # Most functions that don't require security are stored in a Github public repo
    $gURL = 'https://raw.githubusercontent.com/RelayTechIT/RTDiag/main/'
    iwr -useb "$gURL`RTDiagFunctions" | iex
# Functions End

# Script Start

# Begin the script transcript to the logfile
Start-Transcript $LogTxt

# Menu

While (1) {
        $Output =   @()
        $Output +=  "Relay Tech Diagnostic version:"+$ScriptVers
        $Output +=  ""
        $Output +=  "Select an option to continue:"
    $Menu | foreach {
        If ($_.Selected -eq 0) {
            $Output +=  "   "+$_.Prompt+"  -   "+$_.DisplayName
        } else {
            $Output +=  "   X  -   "+$_.DisplayName+"   (Already Run)"
        }
        $n++
        }
        $Output +=  ""
        $Output +=  "   99  -   End Script"
        $Output +=  ""
        $Output | Write-Host
        $c = Read-Host

    If ($c -eq 99) {
        Write-Host "Exiting Menu." -foregroundcolor yellow; Break;
    } elseif (($menu | where Prompt -eq $c).Selected -ne 0) {
        Write-Host "Option" ($Menu | where Prompt -eq $c).FunctionName "previously selected. Pick another option." -foregroundcolor yellow
    } elseif (($menu | where Prompt -eq $c).Selected -eq 0) {
        Write-Host "You selected" ($Menu | where Prompt -eq $c).FunctionName -foregroundcolor yellow
        ($menu | where Prompt -eq $c).selected = 1
        $url = $gURL+($Menu | where Prompt -eq $c).FunctionName; iwr -useb $url | iex
    } else {
        Write-Host "Incorrect Selection. Pick again." -foregroundcolor yellow
    }

    Write-Host ""
    Write-Host "Press any key to go back to the main menu."
    pause
}
