#Variables Start

    $ErrorActionPreference = 'SilentlyContinue'
    $ProgressPreference = 'SilentlyContinue'

    $ScriptName       = 'RTDiagnostic'
    $ScriptVers       = '0.1'

    $DirBse = $Env:SystemDrive+'\RTSupport'    # Base working Directory

    $LogName = ((Get-Date -UFormat "%Y.%m.%d_%R") -replace '[:]')+'_'+$env:COMPUTERNAME+'_'+$ScriptNme+'_v'+$ScriptVer
        $LogTmp = $DirBse+'\'+$LogName+'.tmp'
        $LogTxt = $DirBse+'\'+$LogName+'.log'

    $Picked =   @()

    $Menu   =   @(
        [PSCustomObject]@{Prompt = 1; DisplayName = 'Check System Uptime'; FunctionName = 'Check-System-Uptime'; Description = ''}
        [PSCustomObject]@{Prompt = 2; DisplayName = 'Check Windows Time'; FunctionName = 'Check-WindowsTime'; Description = ''}
        [PSCustomObject]@{Prompt = 3; DisplayName = 'Chocolatey Updates'; FunctionName = 'ChocoUpdate'; Description = ''}
        [PSCustomObject]@{Prompt = 4; DisplayName = 'Windows Updates'; FunctionName = 'WinUpdate'; Description = ''}
        [PSCustomObject]@{Prompt = 5; DisplayName = 'Check Active Backup'; FunctionName = 'Check-ActiveBackup'; Description = ''}
        [PSCustomObject]@{Prompt = 6; DisplayName = 'Disk Cleanup'; FunctionName = 'Disk-Cleanup'; Description = ''}
        [PSCustomObject]@{Prompt = 7; DisplayName = 'Check Disk Space'; FunctionName = 'Check-DiskSpace'; Description = ''}
        [PSCustomObject]@{Prompt = 8; DisplayName = 'Set Power Management'; FunctionName = 'Set-PowerManagement'; Description = ''}
        [PSCustomObject]@{Prompt = 9; DisplayName = 'Check Internet Speed'; FunctionName = 'SpeedTest'; Description = ''}
    )

# Variables End

# Functions Start
    # Most functions that don't require security are stored in a Github public repo
    $gURL = 'https://raw.githubusercontent.com/RelayTechIT/RTDiag/main/'
    iwr -useb "$gURL`RTDiagFunctions" | iex
# Functions End

# Script Start

# Begin the script transcript to the logfile
Start-Transcript $LogTxt

# Menu

While (1) {
        $Output =   @()
        $Output +=  "Relay Tech Diagnostic version:"+$ScriptVers
        $Output +=  ""
        $Output +=  "Select an option to continue:"
    $Menu | foreach {
        $Output +=  "   "+$_.Prompt+"  -   "+$_.DisplayName
        $n++
    }
        $Output +=  ""
        $Output +=  "   99  -   End Script"
        $Output +=  ""
        $Output | Write-Host
        $c = Read-Host

    If ($c -eq 99) {
        Write-Host "Exiting Menu." -foregroundcolor yellow; Break;
    } elseif ($Picked.Contains($c)) {
        Write-Host "Option" ($Menu | where Prompt -eq $c).FunctionName "previously selected. Pick another option." -foregroundcolor yellow
    } elseif (!($Picked.Contains($c))) {
        Write-Host "You picked" ($Menu | where Prompt -eq $c).FunctionName -foregroundcolor yellow
        $Picked += $c
        $url = $gURL+($Menu | where Prompt -eq $c).FunctionName; iwr -useb $url | iex
    } else {
        Write-Host "Incorrect Selection. Pick again." -foregroundcolor yellow
    }
}

# Stop writing to the log file
Stop-Transcript
