
#Variables Start

$ErrorActionPreference = 'SilentlyContinue'
$ProgressPreference = 'SilentlyContinue'

$ScriptName       = 'RTDiagnostic'
$ScriptVers       = '0.1'

$DirBse = $Env:SystemDrive+'\RTSupport'    # Base working Directory

$LogName = ((Get-Date -UFormat "%Y.%m.%d_%R") -replace '[:]')+'_'+$env:COMPUTERNAME+'_'+$ScriptNme+'_v'+$ScriptVer
    $LogTmp = $DirBse+'\'+$LogName+'.tmp'
    $LogTxt = $DirBse+'\'+$LogName+'.log'

# Pre-Requsite Variables
    $ApprovedOperatingSystems     =    @()
    $ApprovedOperatingSystems    +=    'Microsoft Windows 10 Home'
    $ApprovedOperatingSystems    +=    'Microsoft Windows 10 Pro'
    $ApprovedOperatingSystems    +=    'Microsoft Windows 11 Pro'
    $ApprovedOperatingSystems    +=    'Microsoft Windows 11 Home'
    $ApprovedOperatingSystems    +=    'Microsoft Windows Server 2012 R2 Standard'
    $ApprovedOperatingSystems    +=    'Microsoft Windows Server 2019 Standard'


# Variables End

# Functions Start
    # Most functions that don't require security are stored in a Github public repo
    $gURL = 'https://raw.githubusercontent.com/RelayTechIT/RTDiag/main/'
    iwr -useb "$gURL`RTDiagFunctions" | iex
# Functions End

# Get the ID and security principal of the current user account
$myWindowsPrincipal = New-Object System.Security.Principal.WindowsPrincipal([System.Security.Principal.WindowsIdentity]::GetCurrent())

# # Check if Admin
$IsAdmin = [bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")
if (!($IsAdmin)) {
#    # _ErrorMsg -ErrorMessage  "This script must be run with administrative rights. Log in as an administrator and run again."
    start powershell -verb runas -ArgumentList {iwr -useb 'diag.relaytechit.com' | IEX}
# $CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
#  Start-Process -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
  Exit
}

# Self-elevate the script if required
# if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
#  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
#  $CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
#  Start-Process -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
#  Exit
# }
#}

# Begin the script transcript to the logfile
    Start-Transcript $LogTxt

# Script Start

# Check Pre-Requsites
#    iwr -useb 'https://raw.githubusercontent.com/RelayTechIT/RTDiag/main/RTDiag-PreRequsites' | iex



# Check Powershell version
if ($PSVersionTable.PSVersion.Major -lt $MinimumPowerShellVersion.Split(".")[0]) {
    _ErrorMsg -ErrorMessage "Minimum Powershell version is $($MinimumPowerShellVersion). Update Powershell and run again."
    _ErrorMsg -ErrorMessage $PSVersionTable
}

# Check Operating System
    $Info = Get-ComputerInfo
    $ApprovedOperatingSystems | foreach {If ($_ -match $Info.OSName) {$OSPass++}}
    If (!($OsPass)) {
        _ErrorMsg -ErrorMessage "OS: $($Info.OSName) is not an approved Operating System."
    }

# Launch Menu if no pre-requsite errors
If ($ErrN -gt 0) {
    _Msg -type "Fail" -message "Prerequisite tests failed. See output for details"
    $ErrO | foreach {_Msg -type "fail" -message $_}
} else {

    _Msg -type "Pass" -message "All prerequsites passed"    
    #    iwr -useb 'https://raw.githubusercontent.com/RelayTechIT/RTDiag/main/RTDiag_Menu' | iex
    
    # Entries below will display in the menu of the script.
    # The top-most entry will be entry 1, each entry will increment by 1.
    # To add an entry copy the below sample entry and paste it below without the # or <> characters.
    # [PSCustomObject]@{DisplayName = '<Name of Script>'; FunctionName = '<Name of Function>'}
    
    $PreMenu   =   @(
        [PSCustomObject]@{DisplayName = 'Performace Check'; FunctionName = 'RTDiag-PerfCheck'}
        [PSCustomObject]@{DisplayName = 'Test Internet Speed'; FunctionName = 'RTDiag-Test-Bandwidth'}
        [PSCustomObject]@{DisplayName = 'Check System Uptime'; FunctionName = 'RTDiag-Check-System-Uptime'}
        [PSCustomObject]@{DisplayName = 'Check Windows Time'; FunctionName = 'RTDiag-Check-WindowsTime'}
        [PSCustomObject]@{DisplayName = 'Set Power Management'; FunctionName = 'RTDiag-Set-PowerManagement'}
        [PSCustomObject]@{DisplayName = 'Update Chocolatey Packages'; FunctionName = 'RTDiag-ChocoUpdate'}
        [PSCustomObject]@{DisplayName = 'Apply Missing Windows Updates'; FunctionName = 'RTDiag-WinUpdate'}
        [PSCustomObject]@{DisplayName = 'Fix Active Backup Errors'; FunctionName = 'RTDiag-Check-ActiveBackup'}
        [PSCustomObject]@{DisplayName = 'Disk Space Cleanup'; FunctionName = 'RTDiag-Disk-Cleanup'}
        [PSCustomObject]@{DisplayName = 'Check Disk for Issues'; FunctionName = 'RTDiag-Check-Disks'}
        [PSCustomObject]@{DisplayName = 'DoD DISA SCAP Scan v5.9'; FunctionName = 'RTDiag-SCAPScan-v5.9'}
    )

    $n = 1
    $Menu   =   @(
    $PreMenu | foreach {
        [PSCustomObject]@{Prompt = $n; DisplayName = $_.DisplayName; FunctionName = $_.FunctionName; Selected = 0}
        $n++
    }
    )


    While (1) {
        Write-Host "Relay Tech Diagnostic version:"+$ScriptVers
        Write-Host ""
        Write-Host "Select an option to continue:"
    $Menu | foreach {
        If ($_.Selected -eq 0) {
            Write-Host  "   " $_.Prompt "  -   " $_.DisplayName
        } else {
            Write-Host  "   X  -   " $_.DisplayName "   (Already Run)" -ForegroundColor Green
        }
        }
        Write-Host ""
        Write-Host "   99  -   End Script"
        Write-Host ""
        $c = Read-Host
    
    If ($c -eq 99) {
        Write-Host "Exiting Menu." -foregroundcolor yellow; Break;
    } elseif (($menu | where Prompt -eq $c).Selected -ne 0) {
        Write-Host "Option" ($Menu | where Prompt -eq $c).FunctionName "previously selected. Pick another option." -foregroundcolor yellow
    } elseif (($menu | where Prompt -eq $c).Selected -eq 0) {
        Write-Host "Running " ($Menu | where Prompt -eq $c).FunctionName -foregroundcolor yellow
        ($menu | where Prompt -eq $c).selected = 1
        $url = $gURL+($Menu | where Prompt -eq $c).FunctionName; iwr -useb $url | iex
    } else {
        Write-Host "Incorrect Selection. Pick again." -foregroundcolor yellow
    }
    
    Write-Host ""
    Write-Host "Finished running" ($Menu | where Prompt -eq $c).FunctionName "Press any key to go back to the main menu." -foreground yellow
    pause
    }

}



